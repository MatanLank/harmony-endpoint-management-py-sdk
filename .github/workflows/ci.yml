name: CI Workflow

on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release

jobs:
  sonarqube:
    name: SonarCloud Analysis and JFrog Xray Scan
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Step 5: SonarCloud Scan with Docker
      - name: SonarCloud Scan with Docker
        env:
          SONAR_TOKEN: ${{ secrets.DEVSEC01 }}
        run: |
          docker run --rm \
            -e SONAR_TOKEN="${SONAR_TOKEN}" \
            -v "${GITHUB_WORKSPACE}:/usr/src" \
            sonarsource/sonar-scanner-cli:latest \
            sonar-scanner \
            -Dsonar.projectKey=MatanLank_harmony-endpoint-management-py-sdk \
            -Dsonar.organization=matanlank80 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.sources=.
          if [ $? -ne 0 ]; then
            echo "SonarCloud Quality Gate failed. Failing the job."
            exit 1
          fi

      # Step 6: Create the Artifact
      - name: Create Artifact
        run: zip -r artifact.zip folder1/package1

      # Step 7: Upload Artifact to JFrog Artifactory
      - name: Upload Artifact to JFrog Artifactory
        env:
          JFROG_IDENTITY_TOKEN: ${{ secrets.JFROG_IDENTITY_TOKEN }}
        run: |
          curl -u "admin:${JFROG_IDENTITY_TOKEN}" \
          -T artifact.zip \
          "https://matanlank.jfrog.io/artifactory/matan-pypi-repo-pypi/folder1/package1.zip"

      # Step 8: Trigger JFrog XRay Scan
      - name: Trigger JFrog XRay Scan
        env:
          JFROG_IDENTITY_TOKEN: ${{ secrets.JFROG_IDENTITY_TOKEN }}
        run: |
          response=$(curl -s -o output.json -w "%{http_code}" -X POST "https://matanlank.jfrog.io/xray/api/v1/scanArtifact" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${JFROG_IDENTITY_TOKEN}" \
          -d '{
            "repo_key": "matan-pypi-repo-pypi",
            "artifact_path": "folder1/package1.zip"
          }')
          if [ "$response" -ne 200 ]; then
            echo "JFrog XRay scan failed. Failing the job."
            exit 1
          fi
          # Check the scan results for critical issues
          if grep -q '"severity": "Critical"' output.json; then
            echo "Critical vulnerabilities found by JFrog XRay. Failing the job."
            exit 1
          fi

